import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class DistinctPatternDriver {

	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "ipAddress");
		job.setJarByClass(DistinctPatternDriver.class);
		job.setMapperClass(DistinctPatternMapper.class);
		job.setCombinerClass(DistinctPatternReducer.class);
		job.setReducerClass(DistinctPatternReducer.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(NullWritable.class);
		FileInputFormat.addInputPath(job, new Path(args [0]));
		FileOutputFormat.setOutputPath(job, new Path(args [1]));
		System.exit(job.waitForCompletion(true) ? 0 : 1);

	}
	
	
	public class DistinctPatternMapper extends Mapper<Object, Text, Text, NullWritable>{
		Text ipAddress = new Text();

		@Override
		protected void map(Object key, Text value,
				Mapper<Object, Text, Text, NullWritable>.Context context)
				throws IOException, InterruptedException {
			
			StringTokenizer tokens = new StringTokenizer(value.toString());
			//System.out.println("tokens " + tokens);
			while(tokens.hasMoreTokens()){
				ipAddress.set(tokens.nextToken());
				context.write(ipAddress, NullWritable.get());
			}
		}		
	}
	
	public class DistinctPatternReducer extends Reducer<Text, NullWritable, Text, NullWritable>{

		@Override
		protected void reduce(Text arg0, Iterable<NullWritable> arg1,
				Reducer<Text, NullWritable, Text, NullWritable>.Context arg2)
				throws IOException, InterruptedException {
			
			arg2.write(arg0, NullWritable.get());
		}		
	}

}
