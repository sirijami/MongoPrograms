import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;

import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;


public class CountErrorByErrorTypeMapper extends Mapper<Object, Text, NullWritable, NullWritable> {
	public static final String ERRORTYPE_COUNTER_GROUP = "errorType";
	public static final String UNKNOWN_COUNTER = "Unknown";
	public static final String NULL_OR_EMPTY_COUNTER = "Null or Empty";
	
	private String[] errorTypeArray = new String[]{"File does not exist:", "script", 
			"client sent HTTP/1.1 request without hostname (see RFC2616 section 14.23):"			
	};
	private HashSet<String> ErrorType = new HashSet<>(Arrays.asList(errorTypeArray));
	@Override
	protected void map(Object key, Text value,
			Mapper<Object, Text, NullWritable, NullWritable>.Context context)
			throws IOException, InterruptedException {
		
		String[] temp = value.toString().split(" ");
		String eType = temp[3];
		if(eType != null && !eType.isEmpty()){	
			String[] tokens = value.toString().split(" ");
			// for each token 
			boolean unknown = true;
			for(String s: tokens){
				if(ErrorType.contains(s)){
					context.getCounter(ERRORTYPE_COUNTER_GROUP, s).increment(1);
					unknown = false;
					break;
				}				
			}
			
			//if the state is unknown , increment the unknown counter
			if(unknown){
				context.getCounter(ERRORTYPE_COUNTER_GROUP, UNKNOWN_COUNTER).increment(1);
			}
		}else{
			//increment null counter
			context.getCounter(ERRORTYPE_COUNTER_GROUP, NULL_OR_EMPTY_COUNTER).increment(1);
		}

	}
	
	
	

}
