

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class ssMapper extends Mapper<LongWritable, Text, IpAccessDateKey, IntWritable>{
	private static String ipPattern = "((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){"
			+ "3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))(?![\\d])";
	private static String testdate = "\\d+";
	
	 private static String date = "\d+\/\w+\/\d+\:\d+\:\d+\:\d+.[-+ ]\d+" ;
	 
	 
	
	@Override
	protected void map(
			LongWritable key,
			Text value,
			Mapper<LongWritable, Text, IpAccessDateKey, IntWritable>.Context context)
			throws IOException, InterruptedException {
		
		String line = ((Text) value).toString();
		Pattern p = Pattern.compile(ipPattern,Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
		Matcher m = p.matcher(line);
	    if (m.find())
	    {
	        String ipaddress1 = m.group(1);
	        String date = m.group(2);
	        IpAccessDateKey ipAccessDateKey = new IpAccessDateKey(ipAddress1, ;
	        context.write(ipAccessDateKey, new IntWritable(1));
	        System.out.print("("+ipaddress1.toString()+")"+"\n");
	    }
		
		

		if(matcher.matches()){
			System.out.println("Regex matches");
			String ipAddress = matcher.group(1);
			Long accessDate = Long.parseLong(matcher.group(2));
			System.out.println("accessDate " + accessDate);
			IpAccessDateKey 
			context.write(ipAccessDateKey, new IntWritable(1));
		}else{
			System.out.println("regex doesn't matches");
		}
	}
	

}
