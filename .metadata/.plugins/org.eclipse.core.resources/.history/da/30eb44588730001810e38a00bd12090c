import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;


public class MedianSrdDevDrv {
    /* Finding median and standard deviation without combiner optimization 
     * The mapper will process each input record and calculate the median of ratings per movie
     * The output key is the movie and the value is ratings*/
	public static void main(String[] args) {
		

	}
	
	public static class MedianStdDevMapper extends Mapper<Object, Text, IntWritable, IntWritable>{

		@Override
		protected void map(Object key, Text value,
				Mapper<Object, Text, IntWritable, IntWritable>.Context context)
				throws IOException, InterruptedException {
			String[] tokens = value.toString().split(",");
			String movieId = tokens[1];
			String ratings = tokens[2];
			context.write(new IntWritable(Integer.parseInt(movieId)), new IntWritable(Integer.parseInt(ratings)));
		}		
	}
	
	public static class MedianStdDevReducer extends Reducer<IntWritable, IntWritable, IntWritable, MedianStdDevTuple>{
		
		private ArrayList<Float> ratings = new ArrayList<Float>();
		private MedianStdDevTuple result = new MedianStdDevTuple();
		
		@Override
		protected void reduce(
				IntWritable arg0,
				Iterable<IntWritable> arg1,
				Reducer<IntWritable, IntWritable, IntWritable, MedianStdDevTuple>.Context context)
				throws IOException, InterruptedException {
			float sum = 0;
			float count = 0;
			ratings.clear();
			result.setStdDev(0);
			
			/* Iterate through all the rating values */
			for(IntWritable val : arg1){
				ratings.add((float) val.get());
				sum =sum + val.get();
				++count;
			}
			
			/* sort all the ratings to find the median */
			Collections.sort(ratings);
			
			/*if the length of arraylist of ratings is even then find the average of 
			 * middle element else return the mid element
			 */
			if(count % 2 == 0){
				result.setMedian((ratings.get((int) count/2 -1) + ratings.get((int) count/2)) / 2.0f );
			}else{
				result.setMedian(ratings.get((int) count / 2));
			}
			
			/* Calculate the standard deviation */
			float mean = sum/count;
			float sumOfSquares = 0.0f;
			for(float f: ratings){
				sumOfSquares = sumOfSquares + (f-mean) * (f-mean);
			}
			
			result.setStdDev((float) Math.sqrt(sumOfSquares/ (count-1)));
			context.write(arg0, result);
		}
		
	}

}
